// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package models

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/maximmihin/as25/internal/dal/types"
)

type City string

const (
	CityValue0 City = "Москва"
	CityValue1 City = "Казань"
	CityValue2 City = "СанктПетербург"
)

func (e *City) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = City(s)
	case string:
		*e = City(s)
	default:
		return fmt.Errorf("unsupported scan type for City: %T", src)
	}
	return nil
}

type NullCity struct {
	City  City
	Valid bool // Valid is true if City is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCity) Scan(value interface{}) error {
	if value == nil {
		ns.City, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.City.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCity) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.City), nil
}

type ProductsType string

const (
	ProductsTypeValue0 ProductsType = "электроника"
	ProductsTypeValue1 ProductsType = "одежда"
	ProductsTypeValue2 ProductsType = "обувь"
)

func (e *ProductsType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductsType(s)
	case string:
		*e = ProductsType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductsType: %T", src)
	}
	return nil
}

type NullProductsType struct {
	ProductsType ProductsType
	Valid        bool // Valid is true if ProductsType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductsType) Scan(value interface{}) error {
	if value == nil {
		ns.ProductsType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductsType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductsType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductsType), nil
}

type ReceptionProgress string

const (
	ReceptionProgressInProgress ReceptionProgress = "in_progress"
	ReceptionProgressClose      ReceptionProgress = "close"
)

func (e *ReceptionProgress) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReceptionProgress(s)
	case string:
		*e = ReceptionProgress(s)
	default:
		return fmt.Errorf("unsupported scan type for ReceptionProgress: %T", src)
	}
	return nil
}

type NullReceptionProgress struct {
	ReceptionProgress ReceptionProgress
	Valid             bool // Valid is true if ReceptionProgress is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReceptionProgress) Scan(value interface{}) error {
	if value == nil {
		ns.ReceptionProgress, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReceptionProgress.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReceptionProgress) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReceptionProgress), nil
}

type Product struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	Type        ProductsType
	ReceptionID uuid.UUID
}

type Pvz struct {
	ID        uuid.UUID
	CreatedAt time.Time
	LocatedAt types.FtCity
}

type Reception struct {
	ID        uuid.UUID
	CreatedAt time.Time
	PvzID     uuid.UUID
	Status    ReceptionProgress
}
