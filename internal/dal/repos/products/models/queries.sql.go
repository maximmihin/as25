// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package models

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const create = `-- name: Create :exec
INSERT INTO products (id, created_at, type, reception_id)
VALUES ($1, $2, $3, $4)
`

type CreateParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	Type        ProductsType
	ReceptionID uuid.UUID
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.db.Exec(ctx, create,
		arg.ID,
		arg.CreatedAt,
		arg.Type,
		arg.ReceptionID,
	)
	return err
}

const deleteLastInPvz = `-- name: DeleteLastInPvz :execrows
WITH last_product AS (
    SELECT p.id, p.reception_id
    FROM products p
        JOIN receptions r ON p.reception_id = r.id
    WHERE r.pvz_id = $1
        AND r.status = 'in_progress'::reception_progress
    ORDER BY p.created_at DESC
    LIMIT 1
)
DELETE FROM products
WHERE id IN (SELECT id FROM last_product)
RETURNING id, created_at, type, reception_id
`

func (q *Queries) DeleteLastInPvz(ctx context.Context, pvzID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteLastInPvz, pvzID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
